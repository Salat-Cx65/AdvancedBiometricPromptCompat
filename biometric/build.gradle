apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion targetSDK
    defaultConfig {
        //vector drawables + scaleType="centerCrop" is broken on Android 5.0 - 5.1
        vectorDrawables.useSupportLibrary = true
        minSdkVersion minSDK
        targetSdkVersion targetSDK
        versionCode 1
        versionName libsVersion
        consumerProguardFiles "proguard-project-biometric.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation 'dev.skomlach:common:0.0.91'
    compileOnly 'dev.skomlach:biometric-api:0.0.91'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.biometric:biometric:+'
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
    implementation 'com.tencent.soter:soter-core:+'
}


//region Publish to jCenter
def libGroupId = libsGroupId
def libArtifactId = 'biometric'
def libVersion = libsVersion
def libDesc = 'This is an Android project allowing you to use the advanced biometric authorization features.'
def libLicenses = ['Apache-2.0']
def libVCSUrl = 'https://github.com/Salat-Cx65/AdvancedBiometricPromptCompat.git'

// Generate Source Jar
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

// Create the publication with the pom configuration
publishing {
    publications {
        // Create different publications for every build types (debug and release)
        android.buildTypes.all { variant ->
            // Dynamically creating publications name
            "${variant.name}Aar"(MavenPublication) {

                // Artifact properties
                groupId libsGroupId
                version = libVersion
                artifactId variant.name == 'debug' ? libArtifactId + '-dev' : libArtifactId

                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${libArtifactId}-${variant.name}.aar")

                pom.withXml {

                    def repos = asNode().appendNode('repositories')
                    project.repositories.each {
                        def repo = it as MavenArtifactRepository
                        def repository = repos.appendNode('repository')
                        repository.appendNode('id', repo.url.host)
                        repository.appendNode('name', repo.name)
                        repository.appendNode('url', repo.url)

                        def release = repository.appendNode('releases')
                        release.appendNode('enabled', true)
                        release.appendNode('updatePolicy', "always")
                        release.appendNode('checksumPolicy', "ignore")

                    }

                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames = ["${variant.name}Implementation", 'implementation']

                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


// Bintray config
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['releaseAar']
    pkg {
        repo = "Maven"
        name = "$libGroupId:$libArtifactId"
        desc = libDesc
        licenses = libLicenses
        vcsUrl = libVCSUrl
        version {
            name = libVersion
            vcsTag = libVersion
            released = new Date()
        }
    }
}
//endregion